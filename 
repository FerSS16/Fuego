[1mdiff --git a/main.cpp b/main.cpp[m
[1mindex 22e5738..2fad340 100644[m
[1m--- a/main.cpp[m
[1m+++ b/main.cpp[m
[36m@@ -20,16 +20,19 @@[m
 [m
 /*----------------------------------------------------------------------------*/[m
 ///cantidad de filas y columnas de la matriz[m
[31m- const int fil = 50;[m
[32m+[m[32m const int fil = 100;[m
  const int col = fil;[m
 [m
 ///cantidad de veces que se recorre la matriz de estados[m
[31m- const int pasos = 300;[m
[32m+[m[32m const int pasos = 100;[m
  const int salteo = 0;[m
[31m- const int repeticiones = 10;[m
[32m+[m[32m const int repeticiones = 1;[m
 [m
 ///variables[m
[31m- std::vector<float> valores_de_P;// PROBABILIDAD DE CRECIMIENTO[m
[32m+[m[32m //std::vector<float> valores_de_P;// PROBABILIDAD DE CRECIMIENTO[m
[32m+[m[32m //double valores_de_P;[m
[32m+[m[32m  const float P=0.1;[m
[32m+[m[41m [m
  const float g = 0;// INMUNIDAD[m
 // const float h = P/10;// FRECUENCIA DE GENERACION ESPONTANEA DE FUEGOS (F)[m
 [m
[36m@@ -79,6 +82,9 @@[m [mdouble L, N, logL, logN, D;[m
  double fuegos;[m
  double vacios;[m
  double arboles;[m
[32m+[m[32m double fvt;[m
[32m+[m[32m double vvt;[m
[32m+[m[32m double avt;[m
 [m
  //dimension fractal[m
  double radio;[m
[36m@@ -265,6 +271,8 @@[m [mvoid Distribucion(void){[m
            if(Matriz_estados[f][c]==2){[m
 ///conteo de fuegos[m
                 fuegos+=1;[m
[32m+[m[32m                fvt+=1;[m
[32m+[m[41m                [m
 ///histograma de fuegos[m
 /*[m
            for(int m=0;m<fil;m++){[m
[36m@@ -286,9 +294,12 @@[m [mvoid Distribucion(void){[m
             }[m
             else if(Matriz_estados[f][c]==0){[m
                 vacios+=1;[m
[32m+[m[32m                vvt+=1;[m
[32m+[m[41m                [m
                 }[m
             else if(Matriz_estados[f][c]==1){[m
                 arboles+=1;[m
[32m+[m[32m                avt+=1;[m
                 }[m
          }[m
     }[m
[36m@@ -516,9 +527,9 @@[m [mvoid raster_scan(int col, int fil, bool Matriz_occupied[MAX_SIZE][MAX_SIZE]) {[m
 }[m
 [m
 //--------------------------------------------------------------------//[m
[31m-///medir el tamaÔøΩo de cada cluster[m
[32m+[m[32m///medir el tamaÔøΩo de cada cluster (no anda en el cluster, esta remediado mas adelante)[m
 [m
[31m-void Tamano_Cluster(){[m
[32m+[m[32m/*void Tamano_Cluster(){[m
     map<int, int> cluster;[m
     map<int, int> cantidad;[m
 [m
[36m@@ -531,11 +542,11 @@[m [mvoid Tamano_Cluster(){[m
         }[m
     }[m
 ///tabla que dice cuantos hay de cada tamaÔøΩo -sin ordnar-[m
[31m-/*[m
[32m+[m
     for(auto& entry : cluster){[m
         cout<<entry.second<<endl;[m
     }cout<<endl;[m
[31m-*/[m
[32m+[m
 [m
     for(auto& entry : cluster){[m
         int tamano = entry.second;[m
[36m@@ -554,11 +565,54 @@[m [mofstream clusters("tamaÔøΩo", ios::app);[m
 ///guarda archivo tamaÔøΩo[m
 clusters<<"TamaÔøΩo    Cantidad"<<endl<<tamanio<< "         " <<cantidad<< endl;[m
 [m
[31m-        cout<<tamanio <<"           "<<cantidad<<endl;[m
[32m+[m[32m        //cout<<tamanio <<"           "<<cantidad<<endl;[m
     }[m
     //cout<<endl;[m
 clusters.close();[m
 [m
[32m+[m[32m}*/[m
[32m+[m[32mvoid Tamano_Cluster() {[m
[32m+[m[32m    map<int, int> cluster;[m
[32m+[m[32m    map<int, int> cantidad;[m
[32m+[m
[32m+[m[32m    // Asumimos que 'fil' y 'col' est√°n definidas en otro lugar del c√≥digo[m
[32m+[m[32m    for(int x = 0; x < fil; x++) {[m
[32m+[m[32m        for(int y = 0; y < col; y++) {[m
[32m+[m[32m            int labels = label[x][y];[m
[32m+[m[32m            if(labels != 0) {[m
[32m+[m[32m                cluster[labels]++;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Tabla que dice cu√°ntos hay de cada tama√±o - sin ordenar[m
[32m+[m[32m    for(map<int, int>::iterator it = cluster.begin(); it != cluster.end(); ++it) {[m
[32m+[m[32m        printf("%d\n", it->second);[m
[32m+[m[32m    }[m
[32m+[m[32m    printf("\n");[m
[32m+[m
[32m+[m[32m    // Tabla que dice cu√°ntos clusters de cada tama√±o hay - ordenados[m
[32m+[m[32m    for(map<int, int>::iterator it = cluster.begin(); it != cluster.end(); ++it) {[m
[32m+[m[32m        int tamano = it->second;[m
[32m+[m[32m        cantidad[tamano]++;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Guardar archivo tama√±o[m
[32m+[m[32m    FILE *clusters = fopen("tama√±o.txt", "a");[m
[32m+[m[32m    if (clusters == NULL) {[m
[32m+[m[32m        perror("No se pudo abrir el archivo");[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    fprintf(clusters, "Tama√±o    Cantidad\n");[m
[32m+[m[32m    for(map<int, int>::iterator it = cantidad.begin(); it != cantidad.end(); ++it) {[m
[32m+[m[32m        int tamanio = it->first;[m
[32m+[m[32m        int cantidad = it->second;[m
[32m+[m
[32m+[m[32m        fprintf(clusters, "%d         %d\n", tamanio, cantidad);[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    fclose(clusters);[m
 }[m
 [m
 //--------------------------------------------------------------------//[m
[36m@@ -586,8 +640,8 @@[m [mLabels(); Label();[m
     raster_scan(col, fil, Matriz_occupied);[m
 [m
 /// Imprimir las matrices usadas[m
[31m-[m
[31m-/*    for (int y = 0; y < fil; y++) {[m
[32m+[m[32m/*[m
[32m+[m[32m    for (int y = 0; y < fil; y++) {[m
         for (int x = 0; x < col; x++) {[m
             cout << Matriz_occupied[x][y] << "        ";[m
         }[m
[36m@@ -602,7 +656,7 @@[m [mcout<<endl;[m
         }[m
 */[m
     Tamano_Cluster();[m
[31m-  //  return 0;[m
[32m+[m[32m    return 0;[m
 }[m
 [m
 /*--------------------------------------------------------------*/[m
[36m@@ -610,12 +664,16 @@[m [mcout<<endl;[m
 /*--------------------------------------------------------------*/[m
 void Pasos(float valor){[m
 [m
[31m-///abre el archivo[m
[31m-ofstream matriz_moleculas("Matriz_moleculas");[m
[32m+[m[32m///abre el archivo video[m
[32m+[m[32m//ofstream matriz_moleculas("Matriz_moleculas");[m
[32m+[m[32m///abre archivo f_vs_t[m
[32m+[m[32mofstream f_vs_t("f_vs_t");[m
[32m+[m[32m         f_vs_t<<"t      fuego   arboles    vacios"<<endl;[m
[32m+[m
 [m
        for(int i=1;i<pasos+1;i++){[m
 [m
[31m-        fuegos=0;[m
[32m+[m[32m        //fuegos=0;[m
 [m
 ///calcula la dimension fractal[m
 //    DF();[m
[36m@@ -627,7 +685,7 @@[m [mif(i==pasos-1){[m
 //Distribucion();[m
 [m
   ///guarda hoshen kopelman:[m
[31m-[m
[32m+[m[32m/*[m
 ofstream matriz_hk("Matriz_hk");[m
         matriz_hk<<"ITEM: TIMESTEP"<<endl<<i<<endl<<"ITEM: NUMBER OF ATOMS"<<endl<<fil*col<<".0"<<endl<<"ITEM: BOX BOUNDS pp pp"<<endl<<"0.0"<<" "<<fil-1<<".0"<<endl<<"0.0"<<" "<<col-1<<endl<<"0.0"<<" "<<"0.0"<<endl<<"ITEM: ATOMS id type x y z"<<endl;[m
 [m
[36m@@ -640,14 +698,21 @@[m [mofstream matriz_hk("Matriz_hk");[m
                         }[m
                     }[m
 matriz_hk.close();[m
[31m-[m
[32m+[m[32m*/[m
 ///archivo guardado[m
 [m
 }[m
 [m
[32m+[m[32m fvt =0;[m
[32m+[m[32m avt=0;[m
[32m+[m[32m vvt=0;[m
  Distribucion();[m
[32m+[m
[32m+[m[32m///guarda distribucin temporal  f_vs_t[m
[32m+[m[32m f_vs_t<<i<<"   "<<fvt<<"   "<<avt<<"   "<<vvt<<endl;[m
[32m+[m
    if(i>1 && fuegos==0){[m
[31m-        cout<<"stop en i= "<<i<<endl;[m
[32m+[m[32m       // cout<<"stop en i= "<<i<<endl;[m
         //Hoshen_Kopelman();[m
    break;[m
    }[m
[36m@@ -670,7 +735,7 @@[m [mmatriz_hk.close();[m
                             }[m
                         }[m
                     }[m
[31m-[m
[32m+[m[32m/*[m
         matriz_moleculas<<"ITEM: TIMESTEP"<<endl<<i<<endl<<"ITEM: NUMBER OF ATOMS"<<endl<<fil*col<<".0"<<endl<<"ITEM: BOX BOUNDS pp pp"<<endl<<"0.0"<<" "<<fil-1<<".0"<<endl<<"0.0"<<" "<<col-1<<endl<<"0.0"<<" "<<"0.0"<<endl<<"ITEM: ATOMS id type x y z"<<endl;[m
 [m
         int k=0;[m
[36m@@ -681,6 +746,7 @@[m [mmatriz_hk.close();[m
                         k++;[m
                         }[m
                     }[m
[32m+[m[32m*/[m
 [m
 ///archivo guardado[m
 [m
[36m@@ -725,7 +791,8 @@[m [mmatriz_hk.close();[m
                     }[m
 [m
 ///cierra el archivo[m
[31m-matriz_moleculas.close();[m
[32m+[m[32m//matriz_moleculas.close();[m
[32m+[m[32mf_vs_t.close();[m
 [m
 }[m
 /*----------------------------------------------------------------------------*/[m
[36m@@ -737,33 +804,29 @@[m [mint main(){[m
 /// generar el patrÔøΩn de quemado en la matriz[m
     srand(time(0)); contorno(); randomizar();Condiciones_Periodicas();[m
 [m
[31m-///valores de P para los graficos[m
[31m-//vector<float> valores = {0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};[m
[31m-//vector<float> valores = {/*0.008, 0.01, 0.015, 0.02, 0.04, 0.07, 0.1*/0.036};[m
[31m-[m
[31m-    valores_de_P = {0.008};[m
 largest_label=0;[m
[31m- //   for(float P : valores_de_P){[m
[31m- float P=0.1;[m
[31m-[m
 [m
[31m-            cout<<"L = "<<fil<<endl;[m
[31m-            cout<<"Pasos = "<<pasos<<endl;[m
[31m-            cout<<"repeticiones = "<<repeticiones<<endl;[m
[31m-            cout<<"P = "<<P<<endl<<endl;[m
[31m-[m
[31m-            cout<<"TamaÔøΩo    Cantidad"<<endl;[m
[32m+[m[32mMatriz_Moleculas(); Matriz_Estados(); Matriz_Pasos(); Matriz_Occupied();[m
[32m+[m[32m            //cout<<"L = "<<fil<<endl;[m
[32m+[m[32m            //cout<<"Pasos = "<<pasos<<endl;[m
[32m+[m[32m            //cout<<"repeticiones = "<<repeticiones<<endl;[m
[32m+[m[32m            //cout<<"P = "<<P<<endl<<endl;[m
[32m+[m[32m            //cout<<"TamaÔøΩo    Cantidad"<<endl;[m
 [m
         for(int j=0;j<repeticiones;j++){[m
[31m-            Matriz_Moleculas(); Matriz_Estados(); Matriz_Pasos(); Matriz_Occupied();[m
[32m+[m[32m           // Matriz_Moleculas(); Matriz_Estados(); Matriz_Pasos(); Matriz_Occupied();[m
 [m
             fuegos=0;[m
             vacios=0;[m
             arboles=0;[m
[32m+[m[32m            fvt=0;[m
[32m+[m[32m            vvt=0;[m
[32m+[m[32m            avt=0;[m
 [m
             Pasos(P);[m
[31m-cout<<endl;[m
[32m+[m[32m//cout<<endl;[m
             }[m
[32m+[m[41m            [m
       //  }[m
 [m
     return 0;[m
